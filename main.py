import os
import requests
from flask import Flask, request
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

user_lang = {}
user_role = {}

@bot.message_handler(commands=["start"])
def send_welcome(message):
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("“ö–∞–∑–∞“õ—à–∞ üá∞üáø", callback_data="lang_kz"),
        InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")
    )
    bot.send_message(message.chat.id, "–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def handle_language(call):
    lang = call.data.split("_")[1]
    user_lang[call.from_user.id] = lang

    if lang == "ru":
        msg = "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ö—Ç–æ –≤—ã?"
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("–°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞", callback_data="role_creator"),
            InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role_teacher"),
            InlineKeyboardButton("–ñ—é—Ä–∏", callback_data="role_jury")
        )
    else:
        msg = "–°—ñ–∑ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω —Ç–∞“£–¥–∞–¥—ã“£—ã–∑. –°—ñ–∑ –∫—ñ–º—Å—ñ–∑?"
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("–ñ–æ–±–∞ –∞–≤—Ç–æ—Ä—ã", callback_data="role_creator"),
            InlineKeyboardButton("–ú“±“ì–∞–ª—ñ–º", callback_data="role_teacher"),
            InlineKeyboardButton("“ö–∞–∑—ã–ª–∞—Ä", callback_data="role_jury")
        )
    bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("role_"))
def handle_role(call):
    role = call.data.split("_")[1]
    lang = user_lang.get(call.from_user.id, "ru")
    user_role[call.from_user.id] = role

    if lang == "ru":
        if role == "creator":
            bot.send_message(call.message.chat.id, "üß† –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ—ë–º –ø—Ä–æ–µ–∫—Ç–µ, –∏ —è –ø–æ–¥—Å–∫–∞–∂—É –ø—Ä–∞–≤–æ–≤—ã–µ —Ä–∏—Å–∫–∏!")
        elif role == "teacher":
            bot.send_message(call.message.chat.id, "üìö –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ö–æ–¥–µ–∫—Å–∞—Ö –†–ö –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è.")
        elif role == "jury":
            bot.send_message(call.message.chat.id, "‚öñÔ∏è –Ø –ø–æ–º–æ–≥—É –∑–∞–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.")
    else:
        if role == "creator":
            bot.send_message(call.message.chat.id, "üß† –ñ–æ–±–∞“£—ã–∑–¥—ã —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑, –º–µ–Ω –∑–∞“£–¥—ã“õ —Ç”ô—É–µ–∫–µ–ª–¥–µ—Ä–¥—ñ –∞–π—Ç–∞–º—ã–Ω!")
        elif role == "teacher":
            bot.send_message(call.message.chat.id, "üìö –ú–µ–Ω –æ“õ—ã—Ç—É “Ø—à—ñ–Ω “ö–† –∫–æ–¥–µ–∫—Å—Ç–µ—Ä—ñ–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—É–≥–µ –∫”©–º–µ–∫—Ç–µ—Å–µ–º—ñ–Ω.")
        elif role == "jury":
            bot.send_message(call.message.chat.id, "‚öñÔ∏è –ú–µ–Ω “õ–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä“ì–∞ “õ–æ—è—Ç—ã–Ω –∑–∞“£ —Å“±—Ä–∞“õ—Ç–∞—Ä—ã–Ω “±—Å—ã–Ω–∞–º—ã–Ω.")

def generate_prompt(lang, role):
    if lang == "ru":
        if role == "creator":
            return (
                "–¢—ã ‚Äî –ò–ò-—é—Ä–∏—Å—Ç. –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π, –∞ —Ç–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π. "
                "–û—Ü–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç –Ω–∏–∂–µ –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞, –æ–ø—Ä–µ–¥–µ–ª–∏ —Ä–∏—Å–∫–∏, –ø—Ä–æ–±–µ–ª—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
            )
    else:
        if role == "creator":
            return (
                "–°—ñ–∑ ‚Äî –∑–∞“£–≥–µ—Ä —Ä–µ—Ç—ñ–Ω–¥–µ ”ô—Ä–µ–∫–µ—Ç –µ—Ç–µ—Ç—ñ–Ω –∂–∞—Å–∞–Ω–¥—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—Å—ñ–∑. –ù–∞–∑–∞—Ä –∞—É–¥–∞—Ä—ã“£—ã–∑: –±“±–ª –∂–∞—É–∞–ø —Ç–µ–∫ –∫–µ“£–µ—Å, –∑–∞“£–¥—ã“õ –∫“Ø—à–∫–µ –∏–µ –µ–º–µ—Å. "
                "“ö–∞–∑–∞“õ—Å—Ç–∞–Ω –∑–∞“£–Ω–∞–º–∞—Å—ã–Ω–∞ —Å”ô–π–∫–µ—Å –∂–æ–±–∞–Ω—ã –±–∞“ì–∞–ª–∞–ø, —Ç”ô—É–µ–∫–µ–ª–¥–µ—Ä–¥—ñ –∞–Ω—ã“õ—Ç–∞“£—ã–∑:\n\n"
            )
    return "–û—Ü–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞."

@bot.message_handler(func=lambda message: True, content_types=["text"])
def handle_message(message):
    user_id = message.from_user.id
    lang = user_lang.get(user_id, "ru")
    role = user_role.get(user_id)

    if role == "creator":
        bot.send_message(message.chat.id, "‚è≥ –ü—Ä–æ–µ–∫—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 20‚Äì30 —Å–µ–∫—É–Ω–¥...")
        prompt = generate_prompt(lang, role) + message.text
        reply = ask_openrouter(prompt)
        bot.send_message(message.chat.id, reply)
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞.")

def ask_openrouter(prompt):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://openrouter.ai",
        "Content-Type": "application/json"
    }
    data = {
        "model": "deepseek-ai/deepseek-r1-0528:free",
        "messages": [{"role": "user", "content": prompt}]
    }

    try:
        r = requests.post("https://openrouter.ai/api/v1/chat/completions", json=data, headers=headers)
        response = r.json()
        print("DEBUG:", response)
        if "choices" in response:
            return response["choices"][0]["message"]["content"]
        else:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç. –û—Ç–≤–µ—Ç API: {response}"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ò–ò: {e}"

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
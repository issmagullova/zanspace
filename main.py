import os
import requests
from flask import Flask, request
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_lang = {}
user_role = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def send_welcome(message):
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("“ö–∞–∑–∞“õ—à–∞ üá∞üáø", callback_data="lang_kz"),
        InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")
    )
    bot.send_message(message.chat.id, "–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def handle_language(call):
    lang = call.data.split("_")[1]
    user_lang[call.from_user.id] = lang

    if lang == "ru":
        msg = "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ö—Ç–æ –≤—ã?"
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("–°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞", callback_data="role_creator"),
            InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role_teacher"),
            InlineKeyboardButton("–ñ—é—Ä–∏", callback_data="role_jury")
        )
    else:
        msg = "–°—ñ–∑ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω —Ç–∞“£–¥–∞–¥—ã“£—ã–∑. –°—ñ–∑ –∫—ñ–º—Å—ñ–∑?"
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("–ñ–æ–±–∞ –∞–≤—Ç–æ—Ä—ã", callback_data="role_creator"),
            InlineKeyboardButton("–ú“±“ì–∞–ª—ñ–º", callback_data="role_teacher"),
            InlineKeyboardButton("“ö–∞–∑—ã–ª–∞—Ä", callback_data="role_jury")
        )
    bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, reply_markup=markup)

# –í—ã–±–æ—Ä —Ä–æ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("role_"))
def handle_role(call):
    role = call.data.split("_")[1]
    lang = user_lang.get(call.from_user.id, "ru")
    user_role[call.from_user.id] = role

    if lang == "ru":
        if role == "creator":
            bot.send_message(call.message.chat.id, "üß† –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ—ë–º –ø—Ä–æ–µ–∫—Ç–µ, –∏ —è –ø–æ–¥—Å–∫–∞–∂—É –ø—Ä–∞–≤–æ–≤—ã–µ —Ä–∏—Å–∫–∏!")
        elif role == "teacher":
            bot.send_message(call.message.chat.id, "üìö –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ö–æ–¥–µ–∫—Å–∞—Ö –†–ö –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è.")
        elif role == "jury":
            bot.send_message(call.message.chat.id, "‚öñÔ∏è –Ø –ø–æ–º–æ–≥—É –∑–∞–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.")
    else:
        if role == "creator":
            bot.send_message(call.message.chat.id, "üß† –ñ–æ–±–∞“£—ã–∑–¥—ã —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑, –º–µ–Ω –∑–∞“£–¥—ã“õ —Ç”ô—É–µ–∫–µ–ª–¥–µ—Ä–¥—ñ –∞–π—Ç–∞–º—ã–Ω!")
        elif role == "teacher":
            bot.send_message(call.message.chat.id, "üìö –ú–µ–Ω –æ“õ—ã—Ç—É “Ø—à—ñ–Ω “ö–† –∫–æ–¥–µ–∫—Å—Ç–µ—Ä—ñ–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—É–≥–µ –∫”©–º–µ–∫—Ç–µ—Å–µ–º—ñ–Ω.")
        elif role == "jury":
            bot.send_message(call.message.chat.id, "‚öñÔ∏è –ú–µ–Ω “õ–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä“ì–∞ “õ–æ—è—Ç—ã–Ω –∑–∞“£ —Å“±—Ä–∞“õ—Ç–∞—Ä—ã–Ω “±—Å—ã–Ω–∞–º—ã–Ω.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
def generate_prompt(lang, role):
    if lang == "ru":
        if role == "creator":
            return "–¢—ã üß† –ò–ò-—é—Ä–∏—Å—Ç. –û–ø—Ä–µ–¥–µ–ª–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:"
        elif role == "teacher":
            return "–¢—ã üìö –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤—É."
        elif role == "jury":
            return "–¢—ã ‚öñÔ∏è —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç–∞—Ä—Ç–∞–ø–∞–º. –û—Ü–µ–Ω–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞."
    else:
        if role == "creator":
            return "–°—ñ–∑ üß† –∂–∞—Å–∞–Ω–¥—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∑–∞“£–≥–µ—Ä—ñ—Å—ñ–∑. –ñ–æ–±–∞–¥–∞“ì—ã –∑–∞“£–¥—ã“õ —Ç”ô—É–µ–∫–µ–ª–¥–µ—Ä–¥—ñ –∞–Ω—ã“õ—Ç–∞“£—ã–∑:"
        elif role == "teacher":
            return "–°—ñ–∑ üìö –±–∏–∑–Ω–µ—Å “õ“±“õ—ã“ì—ã –ø”ô–Ω—ñ–Ω—ñ“£ –º“±“ì–∞–ª—ñ–º—ñ–Ω–µ –∫”©–º–µ–∫—à—ñ—Å—ñ–∑."
        elif role == "jury":
            return "–°—ñ–∑ ‚öñÔ∏è –°—Ç–∞—Ä—Ç–∞–ø —Å–∞—Ä–∞–ø—à—ã—Å—ã—Å—ã–∑. –ñ–æ–±–∞–Ω—ã“£ –∑–∞“£–¥—ã–ª—ã“ì—ã–Ω –±–∞“ì–∞–ª–∞“£—ã–∑."

    return "–ü–æ–º–æ–≥–∏ —Å –ø—Ä–∞–≤–æ–≤–æ–π –æ—Ü–µ–Ω–∫–æ–π –ø—Ä–æ–µ–∫—Ç–∞."

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π)
@bot.message_handler(func=lambda message: True, content_types=["text"])
def handle_message(message):
    user_id = message.from_user.id
    lang = user_lang.get(user_id, "ru")
    role = user_role.get(user_id)

    if role == "creator":
        prompt = generate_prompt(lang, role) + "\n\n" + message.text
        reply = ask_openrouter(prompt)
        bot.send_message(message.chat.id, reply)
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞.")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouter (mistral-7b-instruct)
def ask_openrouter(prompt):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://openrouter.ai",
        "Content-Type": "application/json"
    }
    data = {
        "model": "mistralai/mistral-7b-instruct",
        "messages": [{"role": "user", "content": prompt}]
    }

    try:
        r = requests.post("https://openrouter.ai/api/v1/chat/completions", json=data, headers=headers)
        response = r.json()
        print("DEBUG:", response)
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ò–ò: {e}"

# Webhook –¥–ª—è Render
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

# –ó–∞–ø—É—Å–∫ Flask
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
import os
import telebot
from flask import Flask, request
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests

TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
MODEL = os.getenv("OPENROUTER_MODEL")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

user_lang = {}
user_role = {}

# –ó–∞–ø—É—Å–∫
@bot.message_handler(commands=["start"])
def send_welcome(message):
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("“ö–∞–∑–∞“õ—à–∞ üá∞üáø", callback_data="lang_kz"),
        InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")
    )
    bot.send_message(message.chat.id, "–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language:", reply_markup=markup)

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def handle_language(call):
    lang = call.data.split("_")[1]
    user_lang[call.from_user.id] = lang

    markup = InlineKeyboardMarkup()
    if lang == "ru":
        msg = "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ö—Ç–æ –≤—ã?"
        markup.add(
            InlineKeyboardButton("–°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞", callback_data="role_creator"),
            InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role_teacher"),
            InlineKeyboardButton("–ñ—é—Ä–∏", callback_data="role_jury")
        )
    else:
        msg = "–°—ñ–∑ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω —Ç–∞“£–¥–∞–¥—ã“£—ã–∑. –°—ñ–∑ –∫—ñ–º—Å—ñ–∑?"
        markup.add(
            InlineKeyboardButton("–ñ–æ–±–∞ –∞–≤—Ç–æ—Ä—ã", callback_data="role_creator"),
            InlineKeyboardButton("–ú“±“ì–∞–ª—ñ–º", callback_data="role_teacher"),
            InlineKeyboardButton("“ö–∞–∑—ã–ª–∞—Ä", callback_data="role_jury")
        )
    bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, reply_markup=markup)

# –í—ã–±–æ—Ä —Ä–æ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("role_"))
def handle_role(call):
    role = call.data.split("_")[1]
    lang = user_lang.get(call.from_user.id, "ru")
    user_role[call.from_user.id] = role

    prompt = generate_prompt(lang, role)
    reply = ask_openrouter(prompt)
    bot.send_message(call.message.chat.id, reply)

def generate_prompt(lang, role):
    if lang == "ru":
        if role == "creator":
            return "–¢—ã ‚Äî –ò–ò-—é—Ä–∏—Å—Ç. –û–ø—Ä–µ–¥–µ–ª–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ–¥—Å–∫–∞–∂–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —ç—Ç–∞–ø—ã –ª–µ–≥–∞–ª–∏–∑–∞—Ü–∏–∏."
        elif role == "teacher":
            return "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤—É. –ü–æ–º–æ–≥–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–¥ —à–∫–æ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –¥–∞–π –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∞–≤–æ–≤—ã–µ –∫–µ–π—Å—ã."
        elif role == "jury":
            return "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç–∞—Ä—Ç–∞–ø–∞–º. –ë—ã—Å—Ç—Ä–æ –æ—Ü–µ–Ω–∏ –ª–µ–≥–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–æ–ø—Ä–æ—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º."
    else:
        if role == "creator":
            return "–°—ñ–∑ ‚Äî –∂–∞—Å–∞–Ω–¥—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∑–∞“£–≥–µ—Ä—ñ—Å—ñ–∑. –ñ–æ–±–∞–¥–∞“ì—ã –∑–∞“£–¥—ã “õ–∞—É—ñ–ø—Ç–µ—Ä–¥—ñ –∞–Ω—ã“õ—Ç–∞“£—ã–∑, “õ–∞–∂–µ—Ç—Ç—ñ “õ“±–∂–∞—Ç—Ç–∞—Ä –º–µ–Ω —Ç—ñ—Ä–∫–µ—É –∂–æ–ª—ã–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—ñ“£—ñ–∑."
        elif role == "teacher":
            return "–°—ñ–∑ ‚Äî –±–∏–∑–Ω–µ—Å “õ“±“õ—ã“ì—ã –ø”ô–Ω—ñ–Ω—ñ“£ –º“±“ì–∞–ª—ñ–º—ñ–Ω–µ –∫”©–º–µ–∫—à—ñ –ò–ò. –ú–∞–∑–º“±–Ω–¥—ã –±–µ–π—ñ–º–¥–µ“£—ñ–∑, —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä –º–µ–Ω “õ“±“õ—ã“õ—Ç—ã“õ –∫–µ–π—Å—Ç–µ—Ä “±—Å—ã–Ω—ã“£—ã–∑."
        elif role == "jury":
            return "–°—ñ–∑ ‚Äî —Å—Ç–∞—Ä—Ç–∞–ø —Å–∞—Ä–∞–ø—à—ã—Å—ã. –ñ–æ–±–∞–Ω—ã“£ –∑–∞“£–¥—ã–ª—ã“ì—ã–Ω –±–∞“ì–∞–ª–∞“£—ã–∑ –∂”ô–Ω–µ “õ–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä“ì–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä “±—Å—ã–Ω—ã“£—ã–∑."
    return "–ü–æ–º–æ–≥–∏ —Å –ø—Ä–∞–≤–æ–≤–æ–π –æ—Ü–µ–Ω–∫–æ–π –ø—Ä–æ–µ–∫—Ç–∞."

def generate_prompt(lang, role):
    # ... —Ç–≤–æ–π –∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ ...
    return "–ü–æ–º–æ–≥–∏ —Å –ø—Ä–∞–≤–æ–≤–æ–π –æ—Ü–µ–Ω–∫–æ–π –ø—Ä–æ–µ–∫—Ç–∞."


def ask_openrouter(prompt):
    api_key = os.getenv("OPENROUTER_API_KEY")
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "openchat/openchat-7b",
        "messages": [
            {"role": "system", "content": "–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫, —ç–∫—Å–ø–µ—Ä—Ç –≤ –ø—Ä–∞–≤–µ –†–ö."},
            {"role": "user", "content": prompt}
        ]
    }
    response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)

    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter."

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    lang = user_lang.get(user_id, "ru")
    role = user_role.get(user_id)

    if role == "creator":
        prompt = generate_prompt(lang, role) + "\n\n" + message.text
        reply = ask_openrouter(prompt)
        bot.send_message(message.chat.id, reply)
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞.")

# –ó–∞–ø—Ä–æ—Å –∫ OpenRouter
def ask_openrouter(prompt):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://openrouter.ai",
        "Content-Type": "application/json"
    }
    data = {
        "model": MODEL,
        "messages": [{"role": "user", "content": prompt}]
    }

    try:
        r = requests.post("https://openrouter.ai/api/v1/chat/completions", json=data, headers=headers)
        response = r.json()
        print("DEBUG:", response)  # ‚Üê –≤–æ—Ç —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ò–ò: {e}"

# Webhook
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

# Flask run
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))